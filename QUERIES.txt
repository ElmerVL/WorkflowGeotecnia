-- Table: rol

-- DROP TABLE rol;

CREATE TABLE rol
(
  codrol serial NOT NULL,
  tiporol character varying(45),
  CONSTRAINT rol_pkey PRIMARY KEY (codrol)
)
WITH (
  OIDS=FALSE
);
ALTER TABLE rol
  OWNER TO postgres;


-- Table: usuario

-- DROP TABLE usuario;

CREATE TABLE usuario
(
  idusuario serial NOT NULL,
  login character varying(45),
  passwd character varying(45),
  habilitada boolean NOT NULL DEFAULT true,
  CONSTRAINT usuario_pkey PRIMARY KEY (idusuario),
  CONSTRAINT usuario_login_key UNIQUE (login)
)
WITH (
  OIDS=FALSE
);
ALTER TABLE usuario
  OWNER TO postgres;

    
-- Table: user_rol

-- DROP TABLE user_rol;

CREATE TABLE user_rol
(
  coduser_rol serial NOT NULL,
  usuario_idusuario integer NOT NULL,
  rol_codrol integer NOT NULL,
  CONSTRAINT user_rol_pkey PRIMARY KEY (coduser_rol, usuario_idusuario, rol_codrol),
  CONSTRAINT user_rol_rol_codrol_fkey FOREIGN KEY (rol_codrol)
      REFERENCES rol (codrol) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT user_rol_usuario_idusuario_fkey FOREIGN KEY (usuario_idusuario)
      REFERENCES usuario (idusuario) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
)
WITH (
  OIDS=FALSE
);
ALTER TABLE user_rol
  OWNER TO postgres;
  
  
-- Table: auxiliar

-- DROP TABLE auxiliar;

CREATE TABLE auxiliar
(
  idauxiliar serial NOT NULL,
  usuario_idusuario integer NOT NULL,
  nombres character varying(45),
  apellidos character varying(45),
  CONSTRAINT auxiliar_pkey PRIMARY KEY (idauxiliar, usuario_idusuario),
  CONSTRAINT auxiliar_usuario_idusuario_fkey FOREIGN KEY (usuario_idusuario)
      REFERENCES usuario (idusuario) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
)
WITH (
  OIDS=FALSE
);
ALTER TABLE auxiliar
  OWNER TO postgres;
  
  
-- Table: contador

-- DROP TABLE contador;

CREATE TABLE contador
(
  idcontador serial NOT NULL,
  usuario_idusuario integer NOT NULL,
  nombres character varying(45),
  apellidos character varying(45),
  CONSTRAINT contador_pkey PRIMARY KEY (idcontador, usuario_idusuario),
  CONSTRAINT contador_usuario_idusuario_fkey FOREIGN KEY (usuario_idusuario)
      REFERENCES usuario (idusuario) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
)
WITH (
  OIDS=FALSE
);
ALTER TABLE contador
  OWNER TO postgres;


-- Table: director

-- DROP TABLE director;

CREATE TABLE director
(
  iddirector serial NOT NULL,
  usuario_idusuario integer NOT NULL,
  nombres character varying(45),
  apellidos character varying(45),
  en_curso boolean,
  CONSTRAINT director_pkey PRIMARY KEY (iddirector, usuario_idusuario),
  CONSTRAINT director_usuario_idusuario_fkey FOREIGN KEY (usuario_idusuario)
      REFERENCES usuario (idusuario) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
)
WITH (
  OIDS=FALSE
);
ALTER TABLE director
  OWNER TO postgres;


-- Table: ingeniero

-- DROP TABLE ingeniero;

CREATE TABLE ingeniero
(
  idingeniero serial NOT NULL,
  usuario_idusuario integer NOT NULL,
  nombres character varying(45),
  apellidos character varying(45),
  cargo character varying(19) NOT NULL,
  CONSTRAINT ingeniero_pkey PRIMARY KEY (idingeniero, usuario_idusuario),
  CONSTRAINT ingeniero_usuario_idusuario_fkey FOREIGN KEY (usuario_idusuario)
      REFERENCES usuario (idusuario) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
)
WITH (
  OIDS=FALSE
);
ALTER TABLE ingeniero
  OWNER TO postgres;
  
    
-- Table: tecnico

-- DROP TABLE tecnico;

CREATE TABLE tecnico
(
  idtecnico serial NOT NULL,
  usuario_idusuario integer NOT NULL,
  nombres character varying(45),
  apellidos character varying(45),
  CONSTRAINT tecnico_pkey PRIMARY KEY (idtecnico, usuario_idusuario),
  CONSTRAINT tecnico_usuario_idusuario_fkey FOREIGN KEY (usuario_idusuario)
      REFERENCES usuario (idusuario) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
)
WITH (
  OIDS=FALSE
);
ALTER TABLE tecnico
  OWNER TO postgres;


-- Table: solicitud

-- DROP TABLE solicitud;

CREATE TABLE solicitud
(
  idsolicitud serial NOT NULL,
  director_iddirector integer NOT NULL,
  director_usuario_idusuario integer NOT NULL,
  ingeniero_idingeniero integer NOT NULL,
  ingeniero_usuario_idusuario integer NOT NULL,
  cliente character varying(35),
  fecha_solicitud date,
  ubicacion character varying(70),
  tipo character varying(21),
  cod_solicitud character varying(9),
  habilitado boolean DEFAULT false,
  contador_idcontador integer,
  informe_entregado boolean DEFAULT false,
  cod_proyecto character varying(9),
  informe_aprobado boolean DEFAULT false,
  CONSTRAINT solicitud_pkey PRIMARY KEY (idsolicitud, director_iddirector, director_usuario_idusuario, ingeniero_idingeniero, ingeniero_usuario_idusuario),
  CONSTRAINT solicitud_director_iddirector_fkey FOREIGN KEY (director_iddirector, director_usuario_idusuario)
      REFERENCES director (iddirector, usuario_idusuario) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT solicitud_ingeniero_idingeniero_fkey FOREIGN KEY (ingeniero_idingeniero, ingeniero_usuario_idusuario)
      REFERENCES ingeniero (idingeniero, usuario_idusuario) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
)
WITH (
  OIDS=FALSE
);
ALTER TABLE solicitud
  OWNER TO postgres;

-- Trigger: clasificar_solicitud on solicitud

-- DROP TRIGGER clasificar_solicitud ON solicitud;

CREATE TRIGGER clasificar_solicitud
  AFTER INSERT
  ON solicitud
  FOR EACH ROW
  EXECUTE PROCEDURE clasificar_solicitud();

-- Trigger: insertar_actualizacion_entrega on solicitud

-- DROP TRIGGER insertar_actualizacion_entrega ON solicitud;

CREATE TRIGGER insertar_actualizacion_entrega
  AFTER UPDATE
  ON solicitud
  FOR EACH ROW
  EXECUTE PROCEDURE insertar_actualizacion_entrega();

-- Trigger: insertar_actualizacion_habilitacion on solicitud

-- DROP TRIGGER insertar_actualizacion_habilitacion ON solicitud;

CREATE TRIGGER insertar_actualizacion_habilitacion
  AFTER UPDATE
  ON solicitud
  FOR EACH ROW
  EXECUTE PROCEDURE insertar_actualizacion_habilitacion();

-- Trigger: insertar_estado_pago on solicitud

-- DROP TRIGGER insertar_estado_pago ON solicitud;

CREATE TRIGGER insertar_estado_pago
  AFTER INSERT
  ON solicitud
  FOR EACH ROW
  EXECUTE PROCEDURE insertar_estado_pago();

-- Trigger: insertar_solicitud on solicitud

-- DROP TRIGGER insertar_solicitud ON solicitud;

CREATE TRIGGER insertar_solicitud
  AFTER INSERT
  ON solicitud
  FOR EACH ROW
  EXECUTE PROCEDURE insertar_solicitud();


-- Table: trabajo_campo

-- DROP TABLE trabajo_campo;

CREATE TABLE trabajo_campo
(
  idtrabajo_campo serial NOT NULL,
  solicitud_ingeniero_usuario_idusuario integer NOT NULL,
  solicitud_ingeniero_idingeniero integer NOT NULL,
  solicitud_director_usuario_idusuario integer NOT NULL,
  solicitud_director_iddirector integer NOT NULL,
  solicitud_idsolicitud integer NOT NULL,
  alcance_creado boolean DEFAULT false,
  alcance_aprobado boolean DEFAULT false,
  CONSTRAINT trabajo_campo_pkey PRIMARY KEY (idtrabajo_campo, solicitud_ingeniero_usuario_idusuario, solicitud_ingeniero_idingeniero, solicitud_director_usuario_idusuario, solicitud_director_iddirector, solicitud_idsolicitud),
  CONSTRAINT trabajo_campo_solicitud_idsolicitud_fkey FOREIGN KEY (solicitud_idsolicitud, solicitud_director_iddirector, solicitud_director_usuario_idusuario, solicitud_ingeniero_idingeniero, solicitud_ingeniero_usuario_idusuario)
      REFERENCES solicitud (idsolicitud, director_iddirector, director_usuario_idusuario, ingeniero_idingeniero, ingeniero_usuario_idusuario) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
)
WITH (
  OIDS=FALSE
);
ALTER TABLE trabajo_campo
  OWNER TO postgres;


-- Table: ensayo_laboratorio

-- DROP TABLE ensayo_laboratorio;

CREATE TABLE ensayo_laboratorio
(
  idensayo_laboratorio serial NOT NULL,
  solicitud_ingeniero_usuario_idusuario integer NOT NULL,
  solicitud_ingeniero_idingeniero integer NOT NULL,
  solicitud_director_usuario_idusuario integer NOT NULL,
  solicitud_director_iddirector integer NOT NULL,
  solicitud_idsolicitud integer NOT NULL,
  muestra_registrada boolean NOT NULL DEFAULT false,
  ensayos_registrados boolean,
  CONSTRAINT ensayo_laboratorio_pkey PRIMARY KEY (idensayo_laboratorio, solicitud_ingeniero_usuario_idusuario, solicitud_ingeniero_idingeniero, solicitud_director_usuario_idusuario, solicitud_director_iddirector, solicitud_idsolicitud),
  CONSTRAINT ensayo_laboratorio_solicitud_idsolicitud_fkey FOREIGN KEY (solicitud_idsolicitud, solicitud_director_iddirector, solicitud_director_usuario_idusuario, solicitud_ingeniero_idingeniero, solicitud_ingeniero_usuario_idusuario)
      REFERENCES solicitud (idsolicitud, director_iddirector, director_usuario_idusuario, ingeniero_idingeniero, ingeniero_usuario_idusuario) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
)
WITH (
  OIDS=FALSE
);
ALTER TABLE ensayo_laboratorio
  OWNER TO postgres;


-- Table: ensayo

-- DROP TABLE ensayo;

CREATE TABLE ensayo
(
  idensayo character varying(5) NOT NULL,
  tipo character varying(5),
  categoria character varying(25),
  ensayo character varying(200),
  unidad character varying(6),
  precio_unitario real DEFAULT 1,
  precio_10_muestras real DEFAULT 1,
  duracion_ensayo integer DEFAULT 1,
  CONSTRAINT ensayo_pkey PRIMARY KEY (idensayo)
)
WITH (
  OIDS=FALSE
);
ALTER TABLE ensayo
  OWNER TO postgres;


-- Table: detalle_ensayos

-- DROP TABLE detalle_ensayos;

CREATE TABLE detalle_ensayos
(
  iddetalle_ensayos serial NOT NULL,
  ensayo_idensayo character varying(5) NOT NULL,
  ensayo_laboratorio_solicitud_idsolicitud integer NOT NULL,
  ensayo_laboratorio_solicitud_director_iddirector integer NOT NULL,
  ensayo_laboratorio_solicitud_director_usuario_idusuario integer NOT NULL,
  ensayo_laboratorio_solicitud_ingeniero_idingeniero integer NOT NULL,
  ensayo_laboratorio_solicitud_ingeniero_usuario_idusuario integer NOT NULL,
  ensayo_laboratorio_idensayo_laboratorio integer NOT NULL,
  cantidad_ensayo integer,
  precio_total_ensayo integer,
  precio_unitario real,
  tiempo_total integer,
  tiempo_unidad integer,
  CONSTRAINT detalle_ensayos_pkey PRIMARY KEY (iddetalle_ensayos, ensayo_idensayo, ensayo_laboratorio_solicitud_idsolicitud, ensayo_laboratorio_solicitud_director_iddirector, ensayo_laboratorio_solicitud_director_usuario_idusuario, ensayo_laboratorio_solicitud_ingeniero_idingeniero, ensayo_laboratorio_solicitud_ingeniero_usuario_idusuario, ensayo_laboratorio_idensayo_laboratorio),
  CONSTRAINT detalle_ensayos_ensayo_idensayo_fkey FOREIGN KEY (ensayo_idensayo)
      REFERENCES ensayo (idensayo) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT detalle_ensayos_ensayo_laboratorio_idensayo_laboratorio_fkey FOREIGN KEY (ensayo_laboratorio_idensayo_laboratorio, ensayo_laboratorio_solicitud_ingeniero_usuario_idusuario, ensayo_laboratorio_solicitud_ingeniero_idingeniero, ensayo_laboratorio_solicitud_director_usuario_idusuario, ensayo_laboratorio_solicitud_director_iddirector, ensayo_laboratorio_solicitud_idsolicitud)
      REFERENCES ensayo_laboratorio (idensayo_laboratorio, solicitud_ingeniero_usuario_idusuario, solicitud_ingeniero_idingeniero, solicitud_director_usuario_idusuario, solicitud_director_iddirector, solicitud_idsolicitud) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
)
WITH (
  OIDS=FALSE
);
ALTER TABLE detalle_ensayos
  OWNER TO postgres;


-- Table: cliente

-- DROP TABLE cliente;

CREATE TABLE cliente
(
  idcliente serial NOT NULL,
  nombre_factura character varying(100),
  nit_ci bigint,
  nombre_contacto character varying(100),
  telefono_fijo integer,
  telefono_celular integer,
  direccion_fiscal character varying(100),
  correo character varying(50),
  tipo_cliente character varying(7),
  ci_contacto integer,
  CONSTRAINT cliente_pkey PRIMARY KEY (idcliente)
)
WITH (
  OIDS=FALSE
);
ALTER TABLE cliente
  OWNER TO postgres;


-- Table: estado_pago

-- DROP TABLE estado_pago;

CREATE TABLE estado_pago
(
  idestado_pago serial NOT NULL,
  solicitud_ingeniero_usuario_idusuario integer NOT NULL,
  solicitud_ingeniero_idingeniero integer NOT NULL,
  solicitud_director_usuario_idusuario integer NOT NULL,
  solicitud_director_iddirector integer NOT NULL,
  solicitud_idsolicitud integer NOT NULL,
  porcentaje_anticipo integer,
  anticipo_pagado boolean DEFAULT false,
  porcentaje_saldo integer,
  saldo_pagado boolean DEFAULT false,
  CONSTRAINT estado_pago_pkey PRIMARY KEY (idestado_pago, solicitud_ingeniero_usuario_idusuario, solicitud_ingeniero_idingeniero, solicitud_director_usuario_idusuario, solicitud_director_iddirector, solicitud_idsolicitud),
  CONSTRAINT estado_pago_solicitud_idsolicitud_fkey FOREIGN KEY (solicitud_idsolicitud, solicitud_director_iddirector, solicitud_director_usuario_idusuario, solicitud_ingeniero_idingeniero, solicitud_ingeniero_usuario_idusuario)
      REFERENCES solicitud (idsolicitud, director_iddirector, director_usuario_idusuario, ingeniero_idingeniero, ingeniero_usuario_idusuario) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
)
WITH (
  OIDS=FALSE
);
ALTER TABLE estado_pago
  OWNER TO postgres;

-- Trigger: insertar_actualizacion_pago on estado_pago

-- DROP TRIGGER insertar_actualizacion_pago ON estado_pago;

CREATE TRIGGER insertar_actualizacion_pago
  AFTER UPDATE
  ON estado_pago
  FOR EACH ROW
  EXECUTE PROCEDURE insertar_actualizacion_pago();


-- Table: formulario_el

-- DROP TABLE formulario_el;

CREATE TABLE formulario_el
(
  idformulario_el serial NOT NULL,
  cliente_idcliente integer NOT NULL,
  detalle_ensayos_ensayo_laboratorio_idensayo_laboratorio integer NOT NULL,
  detalle_ensayos_ensayo_laboratorio_solicitud_ingeniero_usuario_ integer NOT NULL,
  detalle_ensayos_ensayo_laboratorio_solicitud_ingeniero_idingeni integer NOT NULL,
  detalle_ensayos_ensayo_laboratorio_solicitud_director_usuario_i integer NOT NULL,
  detalle_ensayos_ensayo_laboratorio_solicitud_director_iddirecto integer NOT NULL,
  detalle_ensayos_ensayo_laboratorio_solicitud_idsolicitud integer NOT NULL,
  detalle_ensayos_ensayo_idensayo character varying(5) NOT NULL,
  detalle_ensayos_iddetalle_ensayos integer NOT NULL,
  formulario_registrado boolean,
  CONSTRAINT formulario_el_pkey PRIMARY KEY (idformulario_el, cliente_idcliente, detalle_ensayos_ensayo_laboratorio_idensayo_laboratorio, detalle_ensayos_ensayo_laboratorio_solicitud_ingeniero_usuario_, detalle_ensayos_ensayo_laboratorio_solicitud_ingeniero_idingeni, detalle_ensayos_ensayo_laboratorio_solicitud_director_usuario_i, detalle_ensayos_ensayo_laboratorio_solicitud_director_iddirecto, detalle_ensayos_ensayo_laboratorio_solicitud_idsolicitud, detalle_ensayos_ensayo_idensayo, detalle_ensayos_iddetalle_ensayos),
  CONSTRAINT formulario_el_cliente_idcliente_fkey FOREIGN KEY (cliente_idcliente)
      REFERENCES cliente (idcliente) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT formulario_el_detalle_ensayos_iddetalle_ensayos_fkey FOREIGN KEY (detalle_ensayos_iddetalle_ensayos, detalle_ensayos_ensayo_idensayo, detalle_ensayos_ensayo_laboratorio_solicitud_idsolicitud, detalle_ensayos_ensayo_laboratorio_solicitud_director_iddirecto, detalle_ensayos_ensayo_laboratorio_solicitud_director_usuario_i, detalle_ensayos_ensayo_laboratorio_solicitud_ingeniero_idingeni, detalle_ensayos_ensayo_laboratorio_solicitud_ingeniero_usuario_, detalle_ensayos_ensayo_laboratorio_idensayo_laboratorio)
      REFERENCES detalle_ensayos (iddetalle_ensayos, ensayo_idensayo, ensayo_laboratorio_solicitud_idsolicitud, ensayo_laboratorio_solicitud_director_iddirector, ensayo_laboratorio_solicitud_director_usuario_idusuario, ensayo_laboratorio_solicitud_ingeniero_idingeniero, ensayo_laboratorio_solicitud_ingeniero_usuario_idusuario, ensayo_laboratorio_idensayo_laboratorio) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
)
WITH (
  OIDS=FALSE
);
ALTER TABLE formulario_el
  OWNER TO postgres;


-- Table: formulario_tc

-- DROP TABLE formulario_tc;

CREATE TABLE formulario_tc
(
  idformulario_tc serial NOT NULL,
  trabajo_campo_solicitud_idsolicitud integer NOT NULL,
  trabajo_campo_solicitud_director_iddirector integer NOT NULL,
  trabajo_campo_solicitud_director_usuario_idusuario integer NOT NULL,
  trabajo_campo_solicitud_ingeniero_idingeniero integer NOT NULL,
  trabajo_campo_solicitud_ingeniero_usuario_idusuario integer NOT NULL,
  trabajo_campo_idtrabajo_campo integer NOT NULL,
  cliente_idcliente integer NOT NULL,
  formulario_registrado boolean,
  CONSTRAINT formulario_tc_pkey PRIMARY KEY (idformulario_tc, trabajo_campo_solicitud_idsolicitud, trabajo_campo_solicitud_director_iddirector, trabajo_campo_solicitud_director_usuario_idusuario, trabajo_campo_solicitud_ingeniero_idingeniero, trabajo_campo_solicitud_ingeniero_usuario_idusuario, trabajo_campo_idtrabajo_campo, cliente_idcliente),
  CONSTRAINT formulario_tc_cliente_idcliente_fkey FOREIGN KEY (cliente_idcliente)
      REFERENCES cliente (idcliente) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT formulario_tc_trabajo_campo_idtrabajo_campo_fkey FOREIGN KEY (trabajo_campo_idtrabajo_campo, trabajo_campo_solicitud_ingeniero_usuario_idusuario, trabajo_campo_solicitud_ingeniero_idingeniero, trabajo_campo_solicitud_director_usuario_idusuario, trabajo_campo_solicitud_director_iddirector, trabajo_campo_solicitud_idsolicitud)
      REFERENCES trabajo_campo (idtrabajo_campo, solicitud_ingeniero_usuario_idusuario, solicitud_ingeniero_idingeniero, solicitud_director_usuario_idusuario, solicitud_director_iddirector, solicitud_idsolicitud) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
)
WITH (
  OIDS=FALSE
);
ALTER TABLE formulario_tc
  OWNER TO postgres;


-- Table: alcance

-- DROP TABLE alcance;

CREATE TABLE alcance
(
  idalcance serial NOT NULL,
  trabajo_campo_solicitud_idsolicitud integer NOT NULL,
  trabajo_campo_solicitud_director_iddirector integer NOT NULL,
  trabajo_campo_solicitud_director_usuario_idusuario integer NOT NULL,
  trabajo_campo_solicitud_ingeniero_idingeniero integer NOT NULL,
  trabajo_campo_solicitud_ingeniero_usuario_idusuario integer NOT NULL,
  trabajo_campo_idtrabajo_campo integer NOT NULL,
  antecedente text,
  objetivo text,
  trabajo_campo text,
  trabajo_gabinete text,
  trabajo_laboratorio text,
  duracion integer,
  precio real,
  forma_pago text,
  reques_adicionales text,
  observaciones text,
  con_observacion boolean,
  CONSTRAINT alcance_pkey PRIMARY KEY (idalcance, trabajo_campo_solicitud_idsolicitud, trabajo_campo_solicitud_director_iddirector, trabajo_campo_solicitud_director_usuario_idusuario, trabajo_campo_solicitud_ingeniero_idingeniero, trabajo_campo_solicitud_ingeniero_usuario_idusuario, trabajo_campo_idtrabajo_campo),
  CONSTRAINT alcance_trabajo_campo_idtrabajo_campo_fkey FOREIGN KEY (trabajo_campo_idtrabajo_campo, trabajo_campo_solicitud_ingeniero_usuario_idusuario, trabajo_campo_solicitud_ingeniero_idingeniero, trabajo_campo_solicitud_director_usuario_idusuario, trabajo_campo_solicitud_director_iddirector, trabajo_campo_solicitud_idsolicitud)
      REFERENCES trabajo_campo (idtrabajo_campo, solicitud_ingeniero_usuario_idusuario, solicitud_ingeniero_idingeniero, solicitud_director_usuario_idusuario, solicitud_director_iddirector, solicitud_idsolicitud) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
)
WITH (
  OIDS=FALSE
);
ALTER TABLE alcance
  OWNER TO postgres;

-- Trigger: insertar_alcance_creado on alcance

-- DROP TRIGGER insertar_alcance_creado ON alcance;

CREATE TRIGGER insertar_alcance_creado
  AFTER UPDATE
  ON alcance
  FOR EACH ROW
  EXECUTE PROCEDURE insertar_alcance_creado();


-- Table: bitacora_principales

-- DROP TABLE bitacora_principales;

CREATE TABLE bitacora_principales
(
  idbitacora_principales serial NOT NULL,
  actividad character varying(30),
  fecha timestamp without time zone,
  id_solicitud integer,
  CONSTRAINT bitacora_principales_pkey PRIMARY KEY (idbitacora_principales)
)
WITH (
  OIDS=FALSE
);
ALTER TABLE bitacora_principales
  OWNER TO postgres;


-- Table: calendario

-- DROP TABLE calendario;

CREATE TABLE calendario
(
  idcalendario serial NOT NULL,
  solicitud_ingeniero_usuario_idusuario integer NOT NULL,
  solicitud_ingeniero_idingeniero integer NOT NULL,
  solicitud_director_usuario_idusuario integer NOT NULL,
  solicitud_director_iddirector integer NOT NULL,
  solicitud_idsolicitud integer NOT NULL,
  fecha_inicio date,
  fecha_fin date,
  CONSTRAINT calendario_pkey PRIMARY KEY (idcalendario, solicitud_ingeniero_usuario_idusuario, solicitud_ingeniero_idingeniero, solicitud_director_usuario_idusuario, solicitud_director_iddirector, solicitud_idsolicitud),
  CONSTRAINT calendario_solicitud_idsolicitud_fkey FOREIGN KEY (solicitud_idsolicitud, solicitud_director_iddirector, solicitud_director_usuario_idusuario, solicitud_ingeniero_idingeniero, solicitud_ingeniero_usuario_idusuario)
      REFERENCES solicitud (idsolicitud, director_iddirector, director_usuario_idusuario, ingeniero_idingeniero, ingeniero_usuario_idusuario) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
)
WITH (
  OIDS=FALSE
);
ALTER TABLE calendario
  OWNER TO postgres;


-- Table: muestra

-- DROP TABLE muestra;

CREATE TABLE muestra
(
  idmuestra serial NOT NULL,
  ensayo_laboratorio_solicitud_idsolicitud integer NOT NULL,
  ensayo_laboratorio_solicitud_director_iddirector integer NOT NULL,
  ensayo_laboratorio_solicitud_director_usuario_idusuario integer NOT NULL,
  ensayo_laboratorio_solicitud_ingeniero_idingeniero integer NOT NULL,
  ensayo_laboratorio_solicitud_ingeniero_usuario_idusuario integer NOT NULL,
  ensayo_laboratorio_idensayo_laboratorio integer NOT NULL,
  ubicacion_general character varying(70),
  ubicacion_especifica character varying(70),
  profundidad real,
  fecha_toma date,
  metodo_extraccion character varying(23),
  punto integer,
  tipo_muestra character varying(13),
  descripcion character varying(8),
  codigo_muestra character varying(19),
  CONSTRAINT muestra_pkey PRIMARY KEY (idmuestra, ensayo_laboratorio_solicitud_idsolicitud, ensayo_laboratorio_solicitud_director_iddirector, ensayo_laboratorio_solicitud_director_usuario_idusuario, ensayo_laboratorio_solicitud_ingeniero_idingeniero, ensayo_laboratorio_solicitud_ingeniero_usuario_idusuario, ensayo_laboratorio_idensayo_laboratorio),
  CONSTRAINT muestra_ensayo_laboratorio_idensayo_laboratorio_fkey FOREIGN KEY (ensayo_laboratorio_idensayo_laboratorio, ensayo_laboratorio_solicitud_ingeniero_usuario_idusuario, ensayo_laboratorio_solicitud_ingeniero_idingeniero, ensayo_laboratorio_solicitud_director_usuario_idusuario, ensayo_laboratorio_solicitud_director_iddirector, ensayo_laboratorio_solicitud_idsolicitud)
      REFERENCES ensayo_laboratorio (idensayo_laboratorio, solicitud_ingeniero_usuario_idusuario, solicitud_ingeniero_idingeniero, solicitud_director_usuario_idusuario, solicitud_director_iddirector, solicitud_idsolicitud) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
)
WITH (
  OIDS=FALSE
);
ALTER TABLE muestra
  OWNER TO postgres;

-- Trigger: insertar_muestra on muestra

-- DROP TRIGGER insertar_muestra ON muestra;

CREATE TRIGGER insertar_muestra
  AFTER INSERT
  ON muestra
  FOR EACH ROW
  EXECUTE PROCEDURE insertar_muestra();


-- Table: orden_pago

-- DROP TABLE orden_pago;

CREATE TABLE orden_pago
(
  idorden_pago serial NOT NULL,
  estado_pago_solicitud_idsolicitud integer NOT NULL,
  estado_pago_solicitud_director_iddirector integer NOT NULL,
  estado_pago_solicitud_director_usuario_idusuario integer NOT NULL,
  estado_pago_solicitud_ingeniero_idingeniero integer NOT NULL,
  estado_pago_solicitud_ingeniero_usuario_idusuario integer NOT NULL,
  estado_pago_idestado_pago integer NOT NULL,
  nro_orden_pago integer,
  nro_factura_pago integer,
  porcentaje_pago integer,
  monto_pago real,
  CONSTRAINT orden_pago_pkey PRIMARY KEY (idorden_pago, estado_pago_solicitud_idsolicitud, estado_pago_solicitud_director_iddirector, estado_pago_solicitud_director_usuario_idusuario, estado_pago_solicitud_ingeniero_idingeniero, estado_pago_solicitud_ingeniero_usuario_idusuario, estado_pago_idestado_pago),
  CONSTRAINT orden_pago_estado_pago_idestado_pago_fkey FOREIGN KEY (estado_pago_idestado_pago, estado_pago_solicitud_ingeniero_usuario_idusuario, estado_pago_solicitud_ingeniero_idingeniero, estado_pago_solicitud_director_usuario_idusuario, estado_pago_solicitud_director_iddirector, estado_pago_solicitud_idsolicitud)
      REFERENCES estado_pago (idestado_pago, solicitud_ingeniero_usuario_idusuario, solicitud_ingeniero_idingeniero, solicitud_director_usuario_idusuario, solicitud_director_iddirector, solicitud_idsolicitud) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
)
WITH (
  OIDS=FALSE
);
ALTER TABLE orden_pago
  OWNER TO postgres;